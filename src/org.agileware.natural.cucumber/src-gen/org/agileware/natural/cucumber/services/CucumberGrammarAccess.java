/*
 * generated by Xtext
 */
package org.agileware.natural.cucumber.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CucumberGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cFeatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleTitleParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNarrativeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNarrativeNarrativeParserRuleCall_4_0 = (RuleCall)cNarrativeAssignment_4.eContents().get(0);
		private final Assignment cBackgroundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBackgroundBackgroundParserRuleCall_5_0 = (RuleCall)cBackgroundAssignment_5.eContents().get(0);
		private final Assignment cScenariosAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cScenariosAlternatives_6_0 = (Alternatives)cScenariosAssignment_6.eContents().get(0);
		private final RuleCall cScenariosScenarioParserRuleCall_6_0_0 = (RuleCall)cScenariosAlternatives_6_0.eContents().get(0);
		private final RuleCall cScenariosScenarioOutlineParserRuleCall_6_0_1 = (RuleCall)cScenariosAlternatives_6_0.eContents().get(1);
		
		//Feature:
		//	tags+=Tag*
		//	'Feature:'
		//	title=Title EOL+
		//	narrative=Narrative?
		//	background=Background?
		//	scenarios+=(Scenario | ScenarioOutline)+;
		@Override public ParserRule getRule() { return rule; }

		//tags+=Tag* 'Feature:' title=Title EOL+ narrative=Narrative? background=Background? scenarios+=(Scenario |
		//ScenarioOutline)+
		public Group getGroup() { return cGroup; }

		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }

		//'Feature:'
		public Keyword getFeatureKeyword_1() { return cFeatureKeyword_1; }

		//title=Title
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//Title
		public RuleCall getTitleTitleParserRuleCall_2_0() { return cTitleTitleParserRuleCall_2_0; }

		//EOL+
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }

		//narrative=Narrative?
		public Assignment getNarrativeAssignment_4() { return cNarrativeAssignment_4; }

		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_4_0() { return cNarrativeNarrativeParserRuleCall_4_0; }

		//background=Background?
		public Assignment getBackgroundAssignment_5() { return cBackgroundAssignment_5; }

		//Background
		public RuleCall getBackgroundBackgroundParserRuleCall_5_0() { return cBackgroundBackgroundParserRuleCall_5_0; }

		//scenarios+=(Scenario | ScenarioOutline)+
		public Assignment getScenariosAssignment_6() { return cScenariosAssignment_6; }

		//(Scenario | ScenarioOutline)
		public Alternatives getScenariosAlternatives_6_0() { return cScenariosAlternatives_6_0; }

		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_6_0_0() { return cScenariosScenarioParserRuleCall_6_0_0; }

		//ScenarioOutline
		public RuleCall getScenariosScenarioOutlineParserRuleCall_6_0_1() { return cScenariosScenarioOutlineParserRuleCall_6_0_1; }
	}

	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackgroundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleTitleParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNarrativeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNarrativeNarrativeParserRuleCall_3_0 = (RuleCall)cNarrativeAssignment_3.eContents().get(0);
		private final Assignment cStepsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepsStepParserRuleCall_4_0 = (RuleCall)cStepsAssignment_4.eContents().get(0);
		
		//Background:
		//	'Background:'
		//	title=Title? EOL+
		//	narrative=Narrative?
		//	steps+=Step+;
		@Override public ParserRule getRule() { return rule; }

		//'Background:' title=Title? EOL+ narrative=Narrative? steps+=Step+
		public Group getGroup() { return cGroup; }

		//'Background:'
		public Keyword getBackgroundKeyword_0() { return cBackgroundKeyword_0; }

		//title=Title?
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//Title
		public RuleCall getTitleTitleParserRuleCall_1_0() { return cTitleTitleParserRuleCall_1_0; }

		//EOL+
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }

		//narrative=Narrative?
		public Assignment getNarrativeAssignment_3() { return cNarrativeAssignment_3; }

		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_3_0() { return cNarrativeNarrativeParserRuleCall_3_0; }

		//steps+=Step+
		public Assignment getStepsAssignment_4() { return cStepsAssignment_4; }

		//Step
		public RuleCall getStepsStepParserRuleCall_4_0() { return cStepsStepParserRuleCall_4_0; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cScenarioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleTitleParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNarrativeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNarrativeNarrativeParserRuleCall_4_0 = (RuleCall)cNarrativeAssignment_4.eContents().get(0);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		
		//Scenario:
		//	tags+=Tag*
		//	'Scenario:'
		//	title=Title? EOL+
		//	narrative=Narrative?
		//	steps+=Step+;
		@Override public ParserRule getRule() { return rule; }

		//tags+=Tag* 'Scenario:' title=Title? EOL+ narrative=Narrative? steps+=Step+
		public Group getGroup() { return cGroup; }

		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }

		//'Scenario:'
		public Keyword getScenarioKeyword_1() { return cScenarioKeyword_1; }

		//title=Title?
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//Title
		public RuleCall getTitleTitleParserRuleCall_2_0() { return cTitleTitleParserRuleCall_2_0; }

		//EOL+
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }

		//narrative=Narrative?
		public Assignment getNarrativeAssignment_4() { return cNarrativeAssignment_4; }

		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_4_0() { return cNarrativeNarrativeParserRuleCall_4_0; }

		//steps+=Step+
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }

		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }
	}

	public class ScenarioOutlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.ScenarioOutline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cScenarioOutlineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleTitleParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNarrativeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNarrativeNarrativeParserRuleCall_4_0 = (RuleCall)cNarrativeAssignment_4.eContents().get(0);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		private final Assignment cExamplesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExamplesExamplesParserRuleCall_6_0 = (RuleCall)cExamplesAssignment_6.eContents().get(0);
		
		//ScenarioOutline:
		//	tags+=Tag*
		//	'Scenario Outline:'
		//	title=Title? EOL+
		//	narrative=Narrative?
		//	steps+=Step+
		//	examples=Examples;
		@Override public ParserRule getRule() { return rule; }

		//tags+=Tag* 'Scenario Outline:' title=Title? EOL+ narrative=Narrative? steps+=Step+ examples=Examples
		public Group getGroup() { return cGroup; }

		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }

		//'Scenario Outline:'
		public Keyword getScenarioOutlineKeyword_1() { return cScenarioOutlineKeyword_1; }

		//title=Title?
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//Title
		public RuleCall getTitleTitleParserRuleCall_2_0() { return cTitleTitleParserRuleCall_2_0; }

		//EOL+
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }

		//narrative=Narrative?
		public Assignment getNarrativeAssignment_4() { return cNarrativeAssignment_4; }

		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_4_0() { return cNarrativeNarrativeParserRuleCall_4_0; }

		//steps+=Step+
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }

		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }

		//examples=Examples
		public Assignment getExamplesAssignment_6() { return cExamplesAssignment_6; }

		//Examples
		public RuleCall getExamplesExamplesParserRuleCall_6_0() { return cExamplesExamplesParserRuleCall_6_0; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTEP_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionStepDescriptionParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cTablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTablesTableParserRuleCall_3_0 = (RuleCall)cTablesAssignment_3.eContents().get(0);
		private final Assignment cCodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCodeDocStringParserRuleCall_4_0 = (RuleCall)cCodeAssignment_4.eContents().get(0);
		private final Assignment cTablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTablesTableParserRuleCall_5_0 = (RuleCall)cTablesAssignment_5.eContents().get(0);
		
		//Step:
		//	STEP_KEYWORD
		//	description=StepDescription EOL*
		//	tables+=Table*
		//	code=DocString?
		//	tables+=Table*;
		@Override public ParserRule getRule() { return rule; }

		//STEP_KEYWORD description=StepDescription EOL* tables+=Table* code=DocString? tables+=Table*
		public Group getGroup() { return cGroup; }

		//STEP_KEYWORD
		public RuleCall getSTEP_KEYWORDTerminalRuleCall_0() { return cSTEP_KEYWORDTerminalRuleCall_0; }

		//description=StepDescription
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//StepDescription
		public RuleCall getDescriptionStepDescriptionParserRuleCall_1_0() { return cDescriptionStepDescriptionParserRuleCall_1_0; }

		//EOL*
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }

		//tables+=Table*
		public Assignment getTablesAssignment_3() { return cTablesAssignment_3; }

		//Table
		public RuleCall getTablesTableParserRuleCall_3_0() { return cTablesTableParserRuleCall_3_0; }

		//code=DocString?
		public Assignment getCodeAssignment_4() { return cCodeAssignment_4; }

		//DocString
		public RuleCall getCodeDocStringParserRuleCall_4_0() { return cCodeDocStringParserRuleCall_4_0; }

		//tables+=Table*
		public Assignment getTablesAssignment_5() { return cTablesAssignment_5; }

		//Table
		public RuleCall getTablesTableParserRuleCall_5_0() { return cTablesTableParserRuleCall_5_0; }
	}

	public class ExamplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.Examples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExamplesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleTitleParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNarrativeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNarrativeNarrativeParserRuleCall_3_0 = (RuleCall)cNarrativeAssignment_3.eContents().get(0);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableTableParserRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		
		//Examples:
		//	'Examples:'
		//	title=Title? EOL+
		//	narrative=Narrative?
		//	table=Table;
		@Override public ParserRule getRule() { return rule; }

		//'Examples:' title=Title? EOL+ narrative=Narrative? table=Table
		public Group getGroup() { return cGroup; }

		//'Examples:'
		public Keyword getExamplesKeyword_0() { return cExamplesKeyword_0; }

		//title=Title?
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//Title
		public RuleCall getTitleTitleParserRuleCall_1_0() { return cTitleTitleParserRuleCall_1_0; }

		//EOL+
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }

		//narrative=Narrative?
		public Assignment getNarrativeAssignment_3() { return cNarrativeAssignment_3; }

		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_3_0() { return cNarrativeNarrativeParserRuleCall_3_0; }

		//table=Table
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }

		//Table
		public RuleCall getTableTableParserRuleCall_4_0() { return cTableTableParserRuleCall_4_0; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRowsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRowsTABLE_ROWTerminalRuleCall_0_0 = (RuleCall)cRowsAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Table:
		//	rows+=TABLE_ROW+ EOL*;
		@Override public ParserRule getRule() { return rule; }

		//rows+=TABLE_ROW+ EOL*
		public Group getGroup() { return cGroup; }

		//rows+=TABLE_ROW+
		public Assignment getRowsAssignment_0() { return cRowsAssignment_0; }

		//TABLE_ROW
		public RuleCall getRowsTABLE_ROWTerminalRuleCall_0_0() { return cRowsTABLE_ROWTerminalRuleCall_0_0; }

		//EOL*
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}

	public class DocStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.DocString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentDOC_STRINGTerminalRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DocString:
		//	content=DOC_STRING EOL*;
		@Override public ParserRule getRule() { return rule; }

		//content=DOC_STRING EOL*
		public Group getGroup() { return cGroup; }

		//content=DOC_STRING
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }

		//DOC_STRING
		public RuleCall getContentDOC_STRINGTerminalRuleCall_0_0() { return cContentDOC_STRINGTerminalRuleCall_0_0; }

		//EOL*
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}

	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cWORDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cSTEP_KEYWORDTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cTAGNAMETerminalRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		
		//Title:
		//	(WORD | INT | STRING | PLACEHOLDER) (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*;
		@Override public ParserRule getRule() { return rule; }

		//(WORD | INT | STRING | PLACEHOLDER) (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
		public Group getGroup() { return cGroup; }

		//WORD | INT | STRING | PLACEHOLDER
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//WORD
		public RuleCall getWORDTerminalRuleCall_0_0() { return cWORDTerminalRuleCall_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2() { return cSTRINGTerminalRuleCall_0_2; }

		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_0_3() { return cPLACEHOLDERTerminalRuleCall_0_3; }

		//(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//WORD
		public RuleCall getWORDTerminalRuleCall_1_0() { return cWORDTerminalRuleCall_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }

		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_1_3() { return cPLACEHOLDERTerminalRuleCall_1_3; }

		//STEP_KEYWORD
		public RuleCall getSTEP_KEYWORDTerminalRuleCall_1_4() { return cSTEP_KEYWORDTerminalRuleCall_1_4; }

		//TAGNAME
		public RuleCall getTAGNAMETerminalRuleCall_1_5() { return cTAGNAMETerminalRuleCall_1_5; }
	}

	public class NarrativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.Narrative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cWORDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cSTEP_KEYWORDTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cTAGNAMETerminalRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Narrative:
		//	((WORD | INT | STRING | PLACEHOLDER) (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)* EOL+)+;
		@Override public ParserRule getRule() { return rule; }

		//((WORD | INT | STRING | PLACEHOLDER) (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)* EOL+)+
		public Group getGroup() { return cGroup; }

		//WORD | INT | STRING | PLACEHOLDER
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//WORD
		public RuleCall getWORDTerminalRuleCall_0_0() { return cWORDTerminalRuleCall_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2() { return cSTRINGTerminalRuleCall_0_2; }

		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_0_3() { return cPLACEHOLDERTerminalRuleCall_0_3; }

		//(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//WORD
		public RuleCall getWORDTerminalRuleCall_1_0() { return cWORDTerminalRuleCall_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }

		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_1_3() { return cPLACEHOLDERTerminalRuleCall_1_3; }

		//STEP_KEYWORD
		public RuleCall getSTEP_KEYWORDTerminalRuleCall_1_4() { return cSTEP_KEYWORDTerminalRuleCall_1_4; }

		//TAGNAME
		public RuleCall getTAGNAMETerminalRuleCall_1_5() { return cTAGNAMETerminalRuleCall_1_5; }

		//EOL+
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
	}

	public class StepDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.StepDescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTEP_KEYWORDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTAGNAMETerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//StepDescription:
		//	(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)+;
		@Override public ParserRule getRule() { return rule; }

		//(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//WORD
		public RuleCall getWORDTerminalRuleCall_0() { return cWORDTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_3() { return cPLACEHOLDERTerminalRuleCall_3; }

		//STEP_KEYWORD
		public RuleCall getSTEP_KEYWORDTerminalRuleCall_4() { return cSTEP_KEYWORDTerminalRuleCall_4; }

		//TAGNAME
		public RuleCall getTAGNAMETerminalRuleCall_5() { return cTAGNAMETerminalRuleCall_5; }
	}

	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdTAGNAMETerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Tag:
		//	id=TAGNAME EOL?;
		@Override public ParserRule getRule() { return rule; }

		//id=TAGNAME EOL?
		public Group getGroup() { return cGroup; }

		//id=TAGNAME
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//TAGNAME
		public RuleCall getIdTAGNAMETerminalRuleCall_0_0() { return cIdTAGNAMETerminalRuleCall_0_0; }

		//EOL?
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	
	
	private final FeatureElements pFeature;
	private final BackgroundElements pBackground;
	private final ScenarioElements pScenario;
	private final ScenarioOutlineElements pScenarioOutline;
	private final StepElements pStep;
	private final ExamplesElements pExamples;
	private final TableElements pTable;
	private final DocStringElements pDocString;
	private final TitleElements pTitle;
	private final NarrativeElements pNarrative;
	private final StepDescriptionElements pStepDescription;
	private final TagElements pTag;
	private final TerminalRule tINT;
	private final TerminalRule tSTEP_KEYWORD;
	private final TerminalRule tPLACEHOLDER;
	private final TerminalRule tTABLE_ROW;
	private final TerminalRule tDOC_STRING;
	private final TerminalRule tSTRING;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tTAGNAME;
	private final TerminalRule tWORD;
	private final TerminalRule tWS;
	private final TerminalRule tEOL;
	private final TerminalRule tNL;
	
	private final Grammar grammar;

	@Inject
	public CucumberGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFeature = new FeatureElements();
		this.pBackground = new BackgroundElements();
		this.pScenario = new ScenarioElements();
		this.pScenarioOutline = new ScenarioOutlineElements();
		this.pStep = new StepElements();
		this.pExamples = new ExamplesElements();
		this.pTable = new TableElements();
		this.pDocString = new DocStringElements();
		this.pTitle = new TitleElements();
		this.pNarrative = new NarrativeElements();
		this.pStepDescription = new StepDescriptionElements();
		this.pTag = new TagElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.INT");
		this.tSTEP_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.STEP_KEYWORD");
		this.tPLACEHOLDER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.PLACEHOLDER");
		this.tTABLE_ROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.TABLE_ROW");
		this.tDOC_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.DOC_STRING");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.STRING");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.SL_COMMENT");
		this.tTAGNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.TAGNAME");
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.WORD");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.WS");
		this.tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.EOL");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.agileware.natural.cucumber.Cucumber.NL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.agileware.natural.cucumber.Cucumber".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Feature:
	//	tags+=Tag*
	//	'Feature:'
	//	title=Title EOL+
	//	narrative=Narrative?
	//	background=Background?
	//	scenarios+=(Scenario | ScenarioOutline)+;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Background:
	//	'Background:'
	//	title=Title? EOL+
	//	narrative=Narrative?
	//	steps+=Step+;
	public BackgroundElements getBackgroundAccess() {
		return pBackground;
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}

	//Scenario:
	//	tags+=Tag*
	//	'Scenario:'
	//	title=Title? EOL+
	//	narrative=Narrative?
	//	steps+=Step+;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//ScenarioOutline:
	//	tags+=Tag*
	//	'Scenario Outline:'
	//	title=Title? EOL+
	//	narrative=Narrative?
	//	steps+=Step+
	//	examples=Examples;
	public ScenarioOutlineElements getScenarioOutlineAccess() {
		return pScenarioOutline;
	}
	
	public ParserRule getScenarioOutlineRule() {
		return getScenarioOutlineAccess().getRule();
	}

	//Step:
	//	STEP_KEYWORD
	//	description=StepDescription EOL*
	//	tables+=Table*
	//	code=DocString?
	//	tables+=Table*;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//Examples:
	//	'Examples:'
	//	title=Title? EOL+
	//	narrative=Narrative?
	//	table=Table;
	public ExamplesElements getExamplesAccess() {
		return pExamples;
	}
	
	public ParserRule getExamplesRule() {
		return getExamplesAccess().getRule();
	}

	//Table:
	//	rows+=TABLE_ROW+ EOL*;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//DocString:
	//	content=DOC_STRING EOL*;
	public DocStringElements getDocStringAccess() {
		return pDocString;
	}
	
	public ParserRule getDocStringRule() {
		return getDocStringAccess().getRule();
	}

	//Title:
	//	(WORD | INT | STRING | PLACEHOLDER) (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}

	//Narrative:
	//	((WORD | INT | STRING | PLACEHOLDER) (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)* EOL+)+;
	public NarrativeElements getNarrativeAccess() {
		return pNarrative;
	}
	
	public ParserRule getNarrativeRule() {
		return getNarrativeAccess().getRule();
	}

	//StepDescription:
	//	(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)+;
	public StepDescriptionElements getStepDescriptionAccess() {
		return pStepDescription;
	}
	
	public ParserRule getStepDescriptionRule() {
		return getStepDescriptionAccess().getRule();
	}

	//Tag:
	//	id=TAGNAME EOL?;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}

	//terminal INT:
	//	'-'? '0'..'9'+ ('.' '0'..'9'+)?;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal STEP_KEYWORD:
	//	('Stas' | 'Given' | 'When' | 'Then' | 'And' | 'But') (' ' | '\t')+;
	public TerminalRule getSTEP_KEYWORDRule() {
		return tSTEP_KEYWORD;
	} 

	//terminal PLACEHOLDER:
	//	'<' !('>' | ' ' | '\t' | '\n' | '\r')+ '>';
	public TerminalRule getPLACEHOLDERRule() {
		return tPLACEHOLDER;
	} 

	//terminal TABLE_ROW:
	//	'|' (!('|' | '\n' | '\r')* '|')+ (' ' | '\t')* NL;
	public TerminalRule getTABLE_ROWRule() {
		return tTABLE_ROW;
	} 

	//terminal DOC_STRING:
	//	('"""'->'"""' | "'''"->"'''") NL;
	public TerminalRule getDOC_STRINGRule() {
		return tDOC_STRING;
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"' | '\r' | '\n'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'" | '\r' | '\n'))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* NL;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal TAGNAME:
	//	'@' !(' ' | '\t' | '\n' | '\r')+;
	public TerminalRule getTAGNAMERule() {
		return tTAGNAME;
	} 

	//terminal WORD:
	//	!('@' | '|' | ' ' | '\t' | '\n' | '\r') !(' ' | '\t' | '\n' | '\r')*;
	public TerminalRule getWORDRule() {
		return tWORD;
	} 

	//terminal WS:
	//	' ' | '\t';
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal EOL:
	//	NL;
	public TerminalRule getEOLRule() {
		return tEOL;
	} 

	//terminal fragment NL:
	//	'\r'? '\n'?;
	public TerminalRule getNLRule() {
		return tNL;
	} 
}
