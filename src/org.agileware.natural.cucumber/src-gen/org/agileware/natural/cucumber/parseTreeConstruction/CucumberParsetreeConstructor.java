/*
 * generated by Xtext
 */
package org.agileware.natural.cucumber.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import org.agileware.natural.cucumber.services.CucumberGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class CucumberParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private CucumberGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Group(this, this, 0, inst);
			case 1: return new Background_Group(this, this, 1, inst);
			case 2: return new Scenario_Group(this, this, 2, inst);
			case 3: return new ScenarioOutline_Group(this, this, 3, inst);
			case 4: return new Step_Group(this, this, 4, inst);
			case 5: return new Examples_Group(this, this, 5, inst);
			case 6: return new Table_Group(this, this, 6, inst);
			case 7: return new DocString_Group(this, this, 7, inst);
			case 8: return new Tag_Group(this, this, 8, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Feature ****************
 *
 * Feature:
 * 	tags+=Tag*
 * 	'Feature:'
 * 	title=Title EOL+
 * 	narrative=Narrative?
 * 	background=Background?
 * 	scenarios+=(Scenario | ScenarioOutline)+;
 *
 **/

// tags+=Tag* 'Feature:' title=Title EOL+ narrative=Narrative? background=Background? scenarios+=(Scenario |
// ScenarioOutline)+
protected class Feature_Group extends GroupToken {
	
	public Feature_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_ScenariosAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// tags+=Tag*
protected class Feature_TagsAssignment_0 extends AssignmentToken  {
	
	public Feature_TagsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getTagsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tag_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tags",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tags");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTagRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureAccess().getTagsTagParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Feature_TagsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// 'Feature:'
protected class Feature_FeatureKeyword_1 extends KeywordToken  {
	
	public Feature_FeatureKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAccess().getFeatureKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_TagsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// title=Title
protected class Feature_TitleAssignment_2 extends AssignmentToken  {
	
	public Feature_TitleAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getTitleAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_FeatureKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("title",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("title");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureAccess().getTitleTitleParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFeatureAccess().getTitleTitleParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// EOL+
protected class Feature_EOLTerminalRuleCall_3 extends UnassignedTextToken {

	public Feature_EOLTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getEOLTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_TitleAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// narrative=Narrative?
protected class Feature_NarrativeAssignment_4 extends AssignmentToken  {
	
	public Feature_NarrativeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getNarrativeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_EOLTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("narrative",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("narrative");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeatureAccess().getNarrativeNarrativeParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFeatureAccess().getNarrativeNarrativeParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// background=Background?
protected class Feature_BackgroundAssignment_5 extends AssignmentToken  {
	
	public Feature_BackgroundAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getBackgroundAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Background_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("background",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("background");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBackgroundRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureAccess().getBackgroundBackgroundParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Feature_NarrativeAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Feature_EOLTerminalRuleCall_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// scenarios+=(Scenario | ScenarioOutline)+
protected class Feature_ScenariosAssignment_6 extends AssignmentToken  {
	
	public Feature_ScenariosAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getScenariosAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_Group(this, this, 0, inst);
			case 1: return new ScenarioOutline_Group(this, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("scenarios",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("scenarios");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScenarioRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureAccess().getScenariosScenarioParserRuleCall_6_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScenarioOutlineRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureAccess().getScenariosScenarioOutlineParserRuleCall_6_0_1(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Feature_ScenariosAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Feature_BackgroundAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Feature_NarrativeAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Feature_EOLTerminalRuleCall_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Feature ****************/


/************ begin Rule Background ****************
 *
 * Background:
 * 	'Background:'
 * 	title=Title? EOL+
 * 	narrative=Narrative?
 * 	steps+=Step+;
 *
 **/

// 'Background:' title=Title? EOL+ narrative=Narrative? steps+=Step+
protected class Background_Group extends GroupToken {
	
	public Background_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBackgroundAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Background_StepsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBackgroundRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// 'Background:'
protected class Background_BackgroundKeyword_0 extends KeywordToken  {
	
	public Background_BackgroundKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBackgroundAccess().getBackgroundKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// title=Title?
protected class Background_TitleAssignment_1 extends AssignmentToken  {
	
	public Background_TitleAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBackgroundAccess().getTitleAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Background_BackgroundKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("title",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("title");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBackgroundAccess().getTitleTitleParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getBackgroundAccess().getTitleTitleParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// EOL+
protected class Background_EOLTerminalRuleCall_2 extends UnassignedTextToken {

	public Background_EOLTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBackgroundAccess().getEOLTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Background_TitleAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Background_BackgroundKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// narrative=Narrative?
protected class Background_NarrativeAssignment_3 extends AssignmentToken  {
	
	public Background_NarrativeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBackgroundAccess().getNarrativeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Background_EOLTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("narrative",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("narrative");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBackgroundAccess().getNarrativeNarrativeParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getBackgroundAccess().getNarrativeNarrativeParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// steps+=Step+
protected class Background_StepsAssignment_4 extends AssignmentToken  {
	
	public Background_StepsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBackgroundAccess().getStepsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Step_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("steps",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("steps");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStepRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBackgroundAccess().getStepsStepParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Background_StepsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Background_NarrativeAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Background_EOLTerminalRuleCall_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Background ****************/


/************ begin Rule Scenario ****************
 *
 * Scenario:
 * 	tags+=Tag*
 * 	'Scenario:'
 * 	title=Title? EOL+
 * 	narrative=Narrative?
 * 	steps+=Step+;
 *
 **/

// tags+=Tag* 'Scenario:' title=Title? EOL+ narrative=Narrative? steps+=Step+
protected class Scenario_Group extends GroupToken {
	
	public Scenario_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getScenarioAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_StepsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getScenarioRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// tags+=Tag*
protected class Scenario_TagsAssignment_0 extends AssignmentToken  {
	
	public Scenario_TagsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioAccess().getTagsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tag_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tags",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tags");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTagRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getScenarioAccess().getTagsTagParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Scenario_TagsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// 'Scenario:'
protected class Scenario_ScenarioKeyword_1 extends KeywordToken  {
	
	public Scenario_ScenarioKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getScenarioAccess().getScenarioKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_TagsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// title=Title?
protected class Scenario_TitleAssignment_2 extends AssignmentToken  {
	
	public Scenario_TitleAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioAccess().getTitleAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_ScenarioKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("title",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("title");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getScenarioAccess().getTitleTitleParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getScenarioAccess().getTitleTitleParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// EOL+
protected class Scenario_EOLTerminalRuleCall_3 extends UnassignedTextToken {

	public Scenario_EOLTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getScenarioAccess().getEOLTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_TitleAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Scenario_ScenarioKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// narrative=Narrative?
protected class Scenario_NarrativeAssignment_4 extends AssignmentToken  {
	
	public Scenario_NarrativeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioAccess().getNarrativeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Scenario_EOLTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("narrative",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("narrative");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getScenarioAccess().getNarrativeNarrativeParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getScenarioAccess().getNarrativeNarrativeParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// steps+=Step+
protected class Scenario_StepsAssignment_5 extends AssignmentToken  {
	
	public Scenario_StepsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioAccess().getStepsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Step_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("steps",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("steps");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStepRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getScenarioAccess().getStepsStepParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Scenario_StepsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Scenario_NarrativeAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Scenario_EOLTerminalRuleCall_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Scenario ****************/


/************ begin Rule ScenarioOutline ****************
 *
 * ScenarioOutline:
 * 	tags+=Tag*
 * 	'Scenario Outline:'
 * 	title=Title? EOL+
 * 	narrative=Narrative?
 * 	steps+=Step+
 * 	examples=Examples;
 *
 **/

// tags+=Tag* 'Scenario Outline:' title=Title? EOL+ narrative=Narrative? steps+=Step+ examples=Examples
protected class ScenarioOutline_Group extends GroupToken {
	
	public ScenarioOutline_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getScenarioOutlineAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScenarioOutline_ExamplesAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getScenarioOutlineRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// tags+=Tag*
protected class ScenarioOutline_TagsAssignment_0 extends AssignmentToken  {
	
	public ScenarioOutline_TagsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioOutlineAccess().getTagsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tag_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tags",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tags");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTagRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getScenarioOutlineAccess().getTagsTagParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ScenarioOutline_TagsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// 'Scenario Outline:'
protected class ScenarioOutline_ScenarioOutlineKeyword_1 extends KeywordToken  {
	
	public ScenarioOutline_ScenarioOutlineKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getScenarioOutlineAccess().getScenarioOutlineKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScenarioOutline_TagsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// title=Title?
protected class ScenarioOutline_TitleAssignment_2 extends AssignmentToken  {
	
	public ScenarioOutline_TitleAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioOutlineAccess().getTitleAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScenarioOutline_ScenarioOutlineKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("title",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("title");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getScenarioOutlineAccess().getTitleTitleParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getScenarioOutlineAccess().getTitleTitleParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// EOL+
protected class ScenarioOutline_EOLTerminalRuleCall_3 extends UnassignedTextToken {

	public ScenarioOutline_EOLTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getScenarioOutlineAccess().getEOLTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScenarioOutline_TitleAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ScenarioOutline_ScenarioOutlineKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// narrative=Narrative?
protected class ScenarioOutline_NarrativeAssignment_4 extends AssignmentToken  {
	
	public ScenarioOutline_NarrativeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioOutlineAccess().getNarrativeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ScenarioOutline_EOLTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("narrative",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("narrative");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getScenarioOutlineAccess().getNarrativeNarrativeParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getScenarioOutlineAccess().getNarrativeNarrativeParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// steps+=Step+
protected class ScenarioOutline_StepsAssignment_5 extends AssignmentToken  {
	
	public ScenarioOutline_StepsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioOutlineAccess().getStepsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Step_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("steps",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("steps");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStepRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getScenarioOutlineAccess().getStepsStepParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ScenarioOutline_StepsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ScenarioOutline_NarrativeAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ScenarioOutline_EOLTerminalRuleCall_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// examples=Examples
protected class ScenarioOutline_ExamplesAssignment_6 extends AssignmentToken  {
	
	public ScenarioOutline_ExamplesAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getScenarioOutlineAccess().getExamplesAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Examples_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("examples",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("examples");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExamplesRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getScenarioOutlineAccess().getExamplesExamplesParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ScenarioOutline_StepsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ScenarioOutline ****************/


/************ begin Rule Step ****************
 *
 * Step:
 * 	STEP_KEYWORD
 * 	description=StepDescription EOL*
 * 	tables+=Table*
 * 	code=DocString?
 * 	tables+=Table*;
 *
 **/

// STEP_KEYWORD description=StepDescription EOL* tables+=Table* code=DocString? tables+=Table*
protected class Step_Group extends GroupToken {
	
	public Step_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStepAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Step_TablesAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Step_CodeAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Step_TablesAssignment_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Step_DescriptionAssignment_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStepRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// STEP_KEYWORD
protected class Step_STEP_KEYWORDTerminalRuleCall_0 extends UnassignedTextToken {

	public Step_STEP_KEYWORDTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStepAccess().getSTEP_KEYWORDTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// description=StepDescription
protected class Step_DescriptionAssignment_1 extends AssignmentToken  {
	
	public Step_DescriptionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStepAccess().getDescriptionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Step_STEP_KEYWORDTerminalRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("description",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("description");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStepAccess().getDescriptionStepDescriptionParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getStepAccess().getDescriptionStepDescriptionParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// tables+=Table*
protected class Step_TablesAssignment_3 extends AssignmentToken  {
	
	public Step_TablesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStepAccess().getTablesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Table_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tables",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tables");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStepAccess().getTablesTableParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Step_TablesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Step_DescriptionAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// code=DocString?
protected class Step_CodeAssignment_4 extends AssignmentToken  {
	
	public Step_CodeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStepAccess().getCodeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DocString_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDocStringRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStepAccess().getCodeDocStringParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Step_TablesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Step_DescriptionAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// tables+=Table*
protected class Step_TablesAssignment_5 extends AssignmentToken  {
	
	public Step_TablesAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStepAccess().getTablesAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Table_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tables",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tables");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStepAccess().getTablesTableParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Step_TablesAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Step_CodeAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Step_TablesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Step_DescriptionAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Step ****************/


/************ begin Rule Examples ****************
 *
 * Examples:
 * 	'Examples:'
 * 	title=Title? EOL+
 * 	narrative=Narrative?
 * 	table=Table;
 *
 **/

// 'Examples:' title=Title? EOL+ narrative=Narrative? table=Table
protected class Examples_Group extends GroupToken {
	
	public Examples_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExamplesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Examples_TableAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExamplesRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// 'Examples:'
protected class Examples_ExamplesKeyword_0 extends KeywordToken  {
	
	public Examples_ExamplesKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExamplesAccess().getExamplesKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// title=Title?
protected class Examples_TitleAssignment_1 extends AssignmentToken  {
	
	public Examples_TitleAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExamplesAccess().getTitleAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Examples_ExamplesKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("title",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("title");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExamplesAccess().getTitleTitleParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getExamplesAccess().getTitleTitleParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// EOL+
protected class Examples_EOLTerminalRuleCall_2 extends UnassignedTextToken {

	public Examples_EOLTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExamplesAccess().getEOLTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Examples_TitleAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Examples_ExamplesKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// narrative=Narrative?
protected class Examples_NarrativeAssignment_3 extends AssignmentToken  {
	
	public Examples_NarrativeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExamplesAccess().getNarrativeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Examples_EOLTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("narrative",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("narrative");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExamplesAccess().getNarrativeNarrativeParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getExamplesAccess().getNarrativeNarrativeParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// table=Table
protected class Examples_TableAssignment_4 extends AssignmentToken  {
	
	public Examples_TableAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExamplesAccess().getTableAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Table_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("table",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("table");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTableRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExamplesAccess().getTableTableParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Examples_NarrativeAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Examples_EOLTerminalRuleCall_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Examples ****************/


/************ begin Rule Table ****************
 *
 * Table:
 * 	rows+=TABLE_ROW+ EOL*;
 *
 **/

// rows+=TABLE_ROW+ EOL*
protected class Table_Group extends GroupToken {
	
	public Table_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTableAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Table_RowsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// rows+=TABLE_ROW+
protected class Table_RowsAssignment_0 extends AssignmentToken  {
	
	public Table_RowsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTableAccess().getRowsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Table_RowsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rows",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rows");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTableAccess().getRowsTABLE_ROWTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTableAccess().getRowsTABLE_ROWTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Table ****************/


/************ begin Rule DocString ****************
 *
 * DocString:
 * 	content=DOC_STRING EOL*;
 *
 **/

// content=DOC_STRING EOL*
protected class DocString_Group extends GroupToken {
	
	public DocString_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDocStringAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DocString_ContentAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDocStringRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// content=DOC_STRING
protected class DocString_ContentAssignment_0 extends AssignmentToken  {
	
	public DocString_ContentAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDocStringAccess().getContentAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("content",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("content");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDocStringAccess().getContentDOC_STRINGTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDocStringAccess().getContentDOC_STRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DocString ****************/





/************ begin Rule Tag ****************
 *
 * Tag:
 * 	id=TAGNAME EOL?;
 *
 **/

// id=TAGNAME EOL?
protected class Tag_Group extends GroupToken {
	
	public Tag_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTagAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Tag_IdAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTagRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// id=TAGNAME
protected class Tag_IdAssignment_0 extends AssignmentToken  {
	
	public Tag_IdAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTagAccess().getIdAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTagAccess().getIdTAGNAMETerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTagAccess().getIdTAGNAMETerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Tag ****************/

}
