/*
* generated by Xtext
*/
package org.agileware.natural.cucumber.ui.contentassist;

import java.util.ArrayList;
import java.util.Collection;

import org.agileware.natural.common.AbstractAnnotationDescriptor;
import org.agileware.natural.common.JavaAnnotationMatcher;
import org.agileware.natural.common.SnippetsMatcher;
import org.agileware.natural.common.VarMatcher;
import org.agileware.natural.common.data.SnippetEntry;
import org.agileware.natural.common.data.SnippetsCache.ListOfSnippets;
import org.agileware.natural.common.util.StasUtil;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.common.ui.contentassist.TerminalsProposalProvider;
import org.eclipse.xtext.impl.RuleCallImpl;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;

import com.google.inject.Inject;

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class CucumberProposalProvider extends AbstractCucumberProposalProvider {

	@Inject
	private JavaAnnotationMatcher matcher;
	
	@Inject
	private VarMatcher varMatcher;
	
	@Inject
	private SnippetsMatcher snippetsMatcher;
	
	
	@Inject
	private AbstractAnnotationDescriptor descriptor;
	
	public void complete_Step(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (((RuleCallImpl)context.getLastCompleteNode().getGrammarElement()).getRule().getName().equals("EOL") && context.getPrefix().length() == 0) {
			for (String entry : descriptor.getNames()) {
				acceptor.accept(createCompletionProposal(entry + " ", context));
			}
		}
	}
	
	public void findSnippetProposals(URI uri, String prefix, Collection<String> proposals, String encloseWith, String endsWith) {
		ListOfSnippets entries = snippetsMatcher.findSnippet(StasUtil.toFile(uri.path()), "");
		for (SnippetEntry entry : entries) {
			proposals.add(prefix+encloseWith+entry.getAnnotationValue()+encloseWith);
		}
	}
	
	
	public void complete_StepDescription(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		Collection<String> proposals = new ArrayList<>();;
		String prefix = context.getPrefix();
		URI uri = context.getResource().getURI();
		
		
		if ("perform".equals(prefix)) {
			findSnippetProposals (uri, "perform ",  proposals, "", " with");
		} else 
			findSnippetProposals (uri, "",  proposals, "", ";");
		
		 
		
		
		proposals = matcher.findProposals(proposals); // stas. completetion suggestion
		
		for (String proposal : proposals) {
			if (proposal==null || proposal.length()==0) continue;
			String display = proposal;
			if (proposal.charAt(0) == '^') {
				proposal = proposal.substring(1);
			}
			if (proposal.charAt(proposal.length() - 1) == '$') {
				proposal = proposal.substring(0, proposal.length() - 1);
			}
			ICompletionProposal proposalInstance = createCompletionProposal(proposal, display, null, context);
			acceptor.accept(proposalInstance);
		}
		
		
		int varOffset = isVarInput (prefix);
		if (varOffset >= 0) {
		  String subst = prefix.substring(0, varOffset);
		  Collection<String> propos = new ArrayList<String> (); 
		  varMatcher.findVarProposals (context.getResource(), context.getOffset(), "", "", propos);
		  
			for (String proposal : propos) {
				if (proposal==null || proposal.length()==0) continue;
				String display = proposal;
				ICompletionProposal proposalInstance = createCompletionProposal(subst +proposal, display, null, context);
				acceptor.accept(proposalInstance);
			}
		  
		}
		
	}

	private int isVarInput(String prefix) {
		char[] chars = prefix.toCharArray();
		
		for (int i = chars.length-1; i>= 0; i--) {
			if (!isName (chars[i])) { 
				if (chars[i]=='$') return i;
				else return -1;
			}
			
		}
		return -1;
	}

	private boolean isName(char c) {
		return  (c >= 'a' && c <='z' || c >= 'A' && c <='Z' || c >= '0' && c <= '9'|| c=='_');
	}
}
